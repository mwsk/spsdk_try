Use elftosb to build expected SB2 file with the following command line and BD file:

elftosb.exe -V -f rt5xx -k "keys\sbkek.txt" -c "commandFile.bd" -o "Output\test_output.sb2" -s keys_and_certs/selfsign_privatekey_rsa2048.pem -S keys_and_certs/selfsign_v3.der.crt -R keys_and_certs/selfsign_v3.der.crt -h "RHKT.bin" "input\boot_image.bin" -d


------------------------------------------------------------------------------------------------------------
BD for expected_sb2_0_simple_unsigned.sb2:

options {
    flags = 0x4; // 0x8 encrypted + signed / 0x4 encrypted for sb2.1 use only 0x8 encrypted + signed
    buildNumber = 0x1;
    productVersion = "1.00.00";
    componentVersion = "1.00.00";
    secureBinaryVersion = "2.0";
}

sources {
    inputFile = extern(0);
}

section (0;hmacEntries=10) {
    erase 0K..10K;
    load inputFile > 0x00000000;
    reset;
}



------------------------------------------------------------------------------------------------------------
BD for expected_sb2_0_advanced_signed.sb2:

options {
    flags = 0x8; // 0x8 encrypted + signed / 0x4 encrypted for sb2.1 use only 0x8 encrypted + signed
    buildNumber = 0x1;
    productVersion = "1.00.00";
    componentVersion = "1.00.00";
    secureBinaryVersion = "2.0";
}

sources {
    inputFile = extern(0);
}

section (0;hmacEntries=10) {
    erase 0K..10K;
    load inputFile > 0x80000000;
    reset;
}

section (1;hmacEntries=5) {
    erase 0K..10K;
    load inputFile > 0x10000000;
    load inputFile > 0x20000000;
    call 0xffff0000;
    jump 0x12345678;
    reset;
}


------------------------------------------------------------------------------------------------------------
BD for expected_sb2_1_simple_signed.sb2:

options {
    flags = 0x8; // 0x8 encrypted + signed / 0x4 encrypted for sb2.1 use only 0x8 encrypted + signed
    buildNumber = 0x1;
    productVersion = "1.00.00";
    componentVersion = "1.00.00";
    secureBinaryVersion = "2.1";
}

sources {
    inputFile = extern(0);
}

section (0;hmacEntries=10) {
    erase 0K..10K;
    load inputFile > 0x80000000;
    reset;
}



------------------------------------------------------------------------------------------------------------
BD for expected_sb2_1_advanced_signed.sb2:

options {
    flags = 0x8; // 0x8 encrypted + signed / 0x4 encrypted for sb2.1 use only 0x8 encrypted + signed
    buildNumber = 0x1;
    productVersion = "1.00.00";
    componentVersion = "1.00.00";
    secureBinaryVersion = "2.1";
}

sources {
    inputFile = extern(0);
}

section (0;hmacEntries=10) {
    erase 0K..10K;
    load inputFile > 0x80000000;
    reset;
}


section (1;hmacEntries=5) {
    erase 0K..10K;
    load inputFile > 0x10000000;
    load inputFile > 0x20000000;
    call 0xffff0000;
    jump 0x12345678;
    reset;
}



------------------------------------------------------------------------------------------------------------
BD for expected_sb2_0_simple_otfad.sb2 or expected_sb2_1_simple_otfad.sb2:

options {
    flags = 0x8;
    buildNumber = 0x1;
    productVersion = "1.00.00";
    componentVersion = "1.00.00";
    secureBinaryVersion = "2.1";    ///  secureBinaryVersion = "2.0";
}

sources {
    inputFile = extern(0);
}

keyblob (0) {
	(start = 0x08001000,
	end = 0x0800F000,
	key = "B1A0C56AF31E98CD6936A79D9E6F829D",
	counter = "5689fab8b4bfb264")
	()
	()
	()
}

section (0;hmacEntries=10) {
	erase 0K..10K;

	encrypt(0) {
		load inputFile > 0x08001000;
	}

	keywrap (0) {
		load {{50F66BB4F23B855DCD8FEFC0DA59E963}} > 0x08000000;
	}
	reset;
}



------------------------------------------------------------------------------------------------------------
BD for expected_sb2_1_newcommands_signed2048.sb2:


options {
    flags = 0x8; // 0x8 encrypted + signed / 0x4 encrypted for sb2.1 use only 0x8 encrypted + signed
    buildNumber = 0x1;
    productVersion = "1.00.00";
    componentVersion = "1.00.00";
    secureBinaryVersion = "2.1";
}

sources {
    inputFile = extern(0);
}

section (0;hmacEntries=1) {
	version_check sec 0x16;
	version_check nsec 15263;
	erase 0K..10K;
	load inputFile > 0x00000000;
	keystore_from_nv @3 0x12345678;
	keystore_to_nv @3 0x12345678;
	reset;
}

------------------------------------------------------------------------------------------------------------
BD for expected_sb2_1_newcommands_2_signed2048.sb2:


options {
    flags = 0x8; // 0x8 encrypted + signed / 0x4 encrypted for sb2.1 use only 0x8 encrypted + signed
    buildNumber = 0x1;
    productVersion = "1.00.00";
    componentVersion = "1.00.00";
    secureBinaryVersion = "2.1";
}

sources {
    inputFile = extern(0);
}

section (0;hmacEntries=1) {
    // FUSES: user_otp_config
    // USER_BANK1_0 = 00000001
    load fuse {{00 00 00 01}} > 0x01000188;

    // Configure external memory
    load 0xC1503057 > 0x0010C000;
    load 0x20000000 > 0x0010C004;
    enable @0x9 0x0010C000;

    erase 0x8001000..0x80074A4; //Erase FLASH, preserve FCB and KeyStore

    load inputFile > 0x8001000;
}

------------------------------------------------------------------------------------------------------------
[!!PLEASE MIND] elftosb.exe must be updated to used fixed padding and timestamp to generate such SB2 file
